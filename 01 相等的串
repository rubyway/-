"""给定一个 01 串，求它一个最长的子串满足 0 和 1 的个数相等
分析

把 0 看成 -1，1 当做 +1，使用前缀和
需要两个前缀和相等，则这两个前缀和之间的子串满足 0 的个数和 1 的个数相等。
对前缀和排序？O(nlogn)
优化——不需要排序
前缀和范围是[-n..n]，我们加上 n 之后就是[0..2n]，只要记录每个和第一次出现的位置
本质是利用 hash 代替排序
当 hash 值是比较小的非负整数时，可以用作数组下标
"""
def longsub(s):
    length = len(s)
    have = [-1]*(2*length+ 1)  #初始化为-1
    #have[length] = 0
    sm = 0
    best = 0
    for i in xrange(length):
        sm += -1 if s[i] == '0' else 1
        if have[sm]>= 0:     #此前已出现过该前缀和， 计距离并更新best
            best = max(best, i- have[sm]+ 1)
        else:           #此前没出现过该前缀和， 纪录该前缀下标
            have[sm] = i+ 1
    return best
print longsub('1000010111000001')
